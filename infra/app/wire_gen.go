// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/quocdaitrn/cp-task/domain/service/serviceimpl"
	"github.com/quocdaitrn/cp-task/infra/adapters"
	"github.com/quocdaitrn/cp-task/infra/config"
	"github.com/quocdaitrn/cp-task/infra/providers"
	"github.com/quocdaitrn/cp-task/infra/repo/rpcimpl"
	"github.com/quocdaitrn/cp-task/infra/repo/storeimpl"
	"github.com/quocdaitrn/golang-kit/validator"
)

// Injectors from wire.go:

func InitApplication(ctx context.Context) (*ApplicationContext, func(), error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	db, err := adapters.ProvideMySQL(configConfig)
	if err != nil {
		return nil, nil, err
	}
	taskRepo := storeimpl.NewTaskRepo(db)
	userServiceClient, err := adapters.ProvideGRPCUserServiceClient(configConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepo := rpcimpl.NewUserRepo(userServiceClient)
	validatorValidator, err := validator.New()
	if err != nil {
		return nil, nil, err
	}
	taskService := serviceimpl.NewTaskService(taskRepo, userRepo, validatorValidator)
	logger := providers.ProvideLogger()
	authenticateClient, err := adapters.ProvideGRPCAuthClient(configConfig)
	if err != nil {
		return nil, nil, err
	}
	restAPIHandler := adapters.ProvideRoutes(taskService, logger, configConfig, authenticateClient)
	restService, cleanup, err := adapters.ProvideRestService(configConfig, restAPIHandler)
	if err != nil {
		return nil, nil, err
	}
	applicationContext := &ApplicationContext{
		ctx:         ctx,
		cfg:         configConfig,
		restService: restService,
	}
	return applicationContext, func() {
		cleanup()
	}, nil
}
